#EVS File Uploader

require 'net/sftp' #Pure-Ruby implementation of the SFTP protocol. (MIT License)
require 'net/ssh'  #Pure-Ruby implementation of the SSH2 client protocol. (MIT License)
require 'socket'

	#Set necessary variables to allow for OCRA Executable to function on ACE Machines ************************************************
	$targetPath = File.dirname(ENV['OCRA_EXECUTABLE'].to_s)
	Dir.chdir($targetPath)
	#*********************************************************************************************************************************

class FileUploader
	#*********************************************************************************************************************************
	def initialize()
		puts "Welcome to the EVS File Uploader!"
		
		fileLoc = "#{File.expand_path($targetPath)}/Generated Files"
		puts "EVS Generated File Location: #{fileLoc}"
		
		fileNames = findFiles(fileLoc)
		listFiles(fileNames)
		
		hostname = 'unixmngw004.usps.gov'
		ip = getIP(hostname)
		puts "Hostname: #{hostname} // IP: #{ip}"
		uploadFiles(fileNames)
		
		puts "Press any key to exit the program."
		stop = gets.chomp
	end
	#*********************************************************************************************************************************
	def findFiles(loc) #Find all generated EVS files
		fileNames = Dir.glob("#{loc}/autogenerated*")
	
		if fileNames.empty?
			puts "No autogenerated EVS files found!"
		else
			puts "*****************************************************************"
			puts "#{fileNames.size} files found:"
			fileNames.each_with_index do |file, index|
				puts "#{index+1}) #{file}"
			end
			puts "*****************************************************************"
			return fileNames
		end
	end
	#*********************************************************************************************************************************
	def listFiles(fileNames) #Find all generated EVS files
		fileNames.each_with_index do |file, index|
			fileNames[index] = (/autogenerated\S+\W/.match(file)).to_s.delete('.') #Replace full file name (including path) with just the file name (without extension)
		end
		
		fileNames.uniq! #Delete all duplicate values.
	
		if fileNames.empty?
			puts "No autogenerated EVS files found!"
		else
			puts "*****************************************************************"
			puts "Core file name(s) for file(s) found:"
			fileNames.each_with_index do |file, index|
				puts "#{index+1}) #{file}"
			end
			puts "*****************************************************************"
		end
	end
	#*********************************************************************************************************************************
	def openSSH() #Method to open and return an SSH connection object
		ssh Net::SSH.start('unixmngw004.usps.gov','thdsn0', :password => "*********") #eagnmnmepf16
		puts "SSH: #{ssh}"
		return ssh
	end
	#*********************************************************************************************************************************
	def changePermissions(fileNames) #Updates permissions to octal '0777' for full permission
		fileNames.each do |fileName|
			File.chmod(0777, fileName)
		end
	end
	#*********************************************************************************************************************************
	def uploadFiles(fileNames) #Take array of files on source machine, copy to target machine via SFTP. **CONSIDER EMBEDDING SFTP in an SSH HERE
		begin
			Net::SFTP.start('unixmngw004.usps.gov', 'thdsn0', :password => 'Usps0005') do |sftp|
				fileName.each do |file|
					sftp.upload!(file, "/home/thdsn0/#{File.basename(file)}")
					#changePermissions("/home/thdsn0/#{(/autogenerated\S+/.match(file)).to_s}")
					#File.chmod(0777,"/home/thdsn0/#{(/autogenerated\S+/.match(file)).to_s}") #Updates permissions to octal '0777' for full permission
					sftp.setstat("/home/thdsn0/#{File.basename(file)}", :permissions => 0777) #2nd Option to update permissions to octal '0777' for full permission
				end
			end
		rescue
			puts "Connection failed to initialize."
		end
	end
	#*********************************************************************************************************************************
	def copyFile(fileName) #Move files from home directory to correct folder for EVS file processing.
		Net::SSH.start('unixmngw004.usps.gov','thdsn0', :password => "********") do |ssh| #eagnmnmepf16
			output = ssh.exec!("hostname")
		end
		
		#determineFileType() #Types to return:  manifest, sample, extract
		#moveToManifest() #PTSManifest
		#moveToSample() #STATS
		#moveToExtract() #PTSExtract
		
=begin
		Net::SSH.start('unixmngw004','thdsn0', :password => "********") do |initSSH|
			# capture all stderr and stdout output from a remote process
			output = initSSH.exec!("hostname")
			Net::SSH.start('unixmngw004.usps.gov', 'thdsn0', :password => "********") do |ssh| #eagnmnmeq1287
				channel ssh.open_channel do |chan|
					chan.exec "cp -p #{@fileLoc} " do |ch, success|
						raise "Could not execute command." unless success
						ch.on_data do |c, data|
							$stdout.print data
						end
						
						# "on_extended_data" is called when the process writes something to stderr
						ch.on_extended_data do |c, type, data|
							$stderr.print data
						end
					end
				end
			end
		end
=end
	end
	#*********************************************************************************************************************************
	def getIP(hostname) #Method to open and return an SSH connection object
		begin
			return Socket.getaddrinfo(hostname, nil)
		rescue
			return "Not found!"
		end
	end
	#*********************************************************************************************************************************
end

test = FileUploader.new()